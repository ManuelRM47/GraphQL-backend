scalar Date
scalar Cursor

type Query {
  info: String!
  # user query methods
  getAllUsers: [User!]!
  getUserByAccount(email: String!, password: String!): User
  getUserByUsername(user_id: String!, username: String!): User #Can be reduced with Account Query
  getUsersDatagrid(company: String!): [User!]
  
  # company query methods
  getAllCompanies: [Company!]!
  getCompanyByName (name: String!): Company!
  # getUsersByCompany: [User!]! Already implemented in Company schema
  # getDevicesByCompany: [Device]! Already implemented in Company schema

  # device query methods
  getAllDevices: [Device!]!

  # record query methods
  getAllRecords: [Record!]! # This method might be unnecessary
  getRecordsByDevice (pagination: PaginationInput = {}, sort: RecordSortInput = {}, start_date: Date!, end_date: Date!, device_id: String!): RecordConnection!
  getRecordsForGraph (first: Int, start_date: Date!, end_date: Date!, device_id: String!): [Record!]!
  
}

type Mutation {
  # user CRUD operations
  postUser(username: String!, email: String!, password: String!, role: String!, company: String!): User!
  updateUser(username: String!, email: String!, password: String!, role: String!, company: String!,user_id:String!): User!
  deleteUser(user_id:String!, username: String!): User!

  # company CRUD operations
  postCompany(name: String!, location: [Float!]!, razon_social: String!): Company!
  updateCompany(name: String!, location: [Float!]!, razon_social: String!, company_id: String!): Company!
  deleteCompany(name: String!, company_id: String!): Company!

  # device CRUD operations
  postDevice(description: String!, company_id: String!, alert: Boolean!, alert_message: String!, max_value: String!, min_value: String!): Device!
  updateDevice(device_id: String!, description: String!, company_id: String!, alert: Boolean!, alert_message: String!, max_value: String!, min_value: String!): Device!
  deleteDevice(device_id: String!, company_id: String!): Device!

  # record CRUD operations
  postRecord(device_id: String!, value: Int!): Record!
  deleteRecords(start_date: Date!, end_date: Date!, device_id: String!): [Record!]!
}

type Subscription {
  userPosted: User!,
  userUpdated: User!,
  userDeleted: User!
}

type User {
  username: String!
  email: String!
  password: String!
  role: String!
  company: String!
  deleted: Boolean!
  createdAt: Date!
  updatedAt: Date!
  user_id: String!
  company_obj: Company!
}

type Company {
  name: String!
  location: [Float!]!
  razon_social: String!
  deleted: Boolean!
  company_id: String!
  createdAt: Date!
  updatedAt: Date!
  users(first: Int): [User!]!
  devices(first: Int): [Device!]!
}

type Device {
  description: String!
  company_id: String!
  alert: Boolean!
  alert_message: String!
  max_value: String!
  min_value: String!
  deleted: Boolean!
  device_id: String!
  createdAt: Date!
  updatedAt: Date!
  company: Company!
  records(first: Int, start_date: Date, end_date: Date): [Record!]
}

type Record {
  time_stamp: Date!
  ISO_time_stamp: String!
  device_id: String!
  value: Float!
  deleted: Boolean!
  record_id: String!
  createdAt: Date!
  updatedAt: Date!
  device: Device!
}

type RecordConnection {
  totalCount: Int!
  edges: [RecordEdge]!
  pageInfo: PageInfo!
}

type RecordEdge {
  node: Record!
  cursor: Cursor!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: Cursor
}

input PaginationInput {
  first: Int! = 25
  after: Cursor
}

input RecordSortInput {
  field: RecordSortField! = time_stamp
  order: Int! = -1
}

enum RecordSortField {
  time_stamp
  createdAt
  updatedAt
}